var app = require('../app');
var debug = require('debug')('dev:server');
var http = require('http');

var port = normalizePort(process.env.PORT || '3020');
app.set('port', port);
console.log("port:", port);

var server = http.createServer(app);
var io = require('socket.io')(server);
var socket = new Object();
var user_dict = new Object();
io.on('connection' , function(_socket) { 
	console.log('_socket:', _socket.id);
	_socket.emit('connection', _socket.id);
	
	
	module.exports = { socket, user_dict, io };
	// 각 formUser에 socket_id 를 저장
	// _socket.on("Connection", function(data) {
	
	// 사용자가 로그아웃, 튕김, 페이지나감에 대한 disconnect event
	_socket.on('disconnect', function(data) {
		console.log("연결끊김");
	});
});
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);
	if (isNaN(port)) { return val; }
	if (port >= 0) { return port; }
	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') { throw error; }
	var bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
}