{"ast":null,"code":"import { h, withDirectives } from 'vue';\nexport function hSlot(slot, otherwise) {\n  return slot !== void 0 ? slot() || otherwise : otherwise;\n}\nexport function hUniqueSlot(slot, otherwise) {\n  if (slot !== void 0) {\n    const vnode = slot();\n\n    if (vnode !== void 0 && vnode !== null) {\n      return vnode.slice();\n    }\n  }\n\n  return otherwise;\n}\n/**\r\n * Source definitely exists,\r\n * so it's merged with the possible slot\r\n */\n\nexport function hMergeSlot(slot, source) {\n  return slot !== void 0 ? source.concat(slot()) : source;\n}\n/**\r\n * Merge with possible slot,\r\n * even if source might not exist\r\n */\n\nexport function hMergeSlotSafely(slot, source) {\n  if (slot === void 0) {\n    return source;\n  }\n\n  return source !== void 0 ? source.concat(slot()) : slot();\n}\n/*\r\n * (String)  key       - unique vnode key\r\n * (Boolean) condition - should change ONLY when adding/removing directive\r\n */\n\nexport function hDir(tag, data, children, key, condition, getDirsFn) {\n  data.key = key + condition;\n  const vnode = h(tag, data, children);\n  return condition === true ? withDirectives(vnode, getDirsFn()) : vnode;\n}","map":{"version":3,"names":["h","withDirectives","hSlot","slot","otherwise","hUniqueSlot","vnode","slice","hMergeSlot","source","concat","hMergeSlotSafely","hDir","tag","data","children","key","condition","getDirsFn"],"sources":["C:/Users/82107/Desktop/WEB_YBR/frontend_ybr/node_modules/quasar/src/utils/private/render.js"],"sourcesContent":["import { h, withDirectives } from 'vue'\r\n\r\nexport function hSlot (slot, otherwise) {\r\n  return slot !== void 0\r\n    ? slot() || otherwise\r\n    : otherwise\r\n}\r\n\r\nexport function hUniqueSlot (slot, otherwise) {\r\n  if (slot !== void 0) {\r\n    const vnode = slot()\r\n    if (vnode !== void 0 && vnode !== null) {\r\n      return vnode.slice()\r\n    }\r\n  }\r\n\r\n  return otherwise\r\n}\r\n\r\n/**\r\n * Source definitely exists,\r\n * so it's merged with the possible slot\r\n */\r\nexport function hMergeSlot (slot, source) {\r\n  return slot !== void 0\r\n    ? source.concat(slot())\r\n    : source\r\n}\r\n\r\n/**\r\n * Merge with possible slot,\r\n * even if source might not exist\r\n */\r\nexport function hMergeSlotSafely (slot, source) {\r\n  if (slot === void 0) {\r\n    return source\r\n  }\r\n\r\n  return source !== void 0\r\n    ? source.concat(slot())\r\n    : slot()\r\n}\r\n\r\n/*\r\n * (String)  key       - unique vnode key\r\n * (Boolean) condition - should change ONLY when adding/removing directive\r\n */\r\nexport function hDir (\r\n  tag,\r\n  data,\r\n  children,\r\n  key,\r\n  condition,\r\n  getDirsFn\r\n) {\r\n  data.key = key + condition\r\n\r\n  const vnode = h(tag, data, children)\r\n\r\n  return condition === true\r\n    ? withDirectives(vnode, getDirsFn())\r\n    : vnode\r\n}\r\n"],"mappings":"AAAA,SAASA,CAAT,EAAYC,cAAZ,QAAkC,KAAlC;AAEA,OAAO,SAASC,KAAT,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiC;EACtC,OAAOD,IAAI,KAAK,KAAK,CAAd,GACHA,IAAI,MAAMC,SADP,GAEHA,SAFJ;AAGD;AAED,OAAO,SAASC,WAAT,CAAsBF,IAAtB,EAA4BC,SAA5B,EAAuC;EAC5C,IAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;IACnB,MAAMG,KAAK,GAAGH,IAAI,EAAlB;;IACA,IAAIG,KAAK,KAAK,KAAK,CAAf,IAAoBA,KAAK,KAAK,IAAlC,EAAwC;MACtC,OAAOA,KAAK,CAACC,KAAN,EAAP;IACD;EACF;;EAED,OAAOH,SAAP;AACD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASI,UAAT,CAAqBL,IAArB,EAA2BM,MAA3B,EAAmC;EACxC,OAAON,IAAI,KAAK,KAAK,CAAd,GACHM,MAAM,CAACC,MAAP,CAAcP,IAAI,EAAlB,CADG,GAEHM,MAFJ;AAGD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASE,gBAAT,CAA2BR,IAA3B,EAAiCM,MAAjC,EAAyC;EAC9C,IAAIN,IAAI,KAAK,KAAK,CAAlB,EAAqB;IACnB,OAAOM,MAAP;EACD;;EAED,OAAOA,MAAM,KAAK,KAAK,CAAhB,GACHA,MAAM,CAACC,MAAP,CAAcP,IAAI,EAAlB,CADG,GAEHA,IAAI,EAFR;AAGD;AAED;AACA;AACA;AACA;;AACA,OAAO,SAASS,IAAT,CACLC,GADK,EAELC,IAFK,EAGLC,QAHK,EAILC,GAJK,EAKLC,SALK,EAMLC,SANK,EAOL;EACAJ,IAAI,CAACE,GAAL,GAAWA,GAAG,GAAGC,SAAjB;EAEA,MAAMX,KAAK,GAAGN,CAAC,CAACa,GAAD,EAAMC,IAAN,EAAYC,QAAZ,CAAf;EAEA,OAAOE,SAAS,KAAK,IAAd,GACHhB,cAAc,CAACK,KAAD,EAAQY,SAAS,EAAjB,CADX,GAEHZ,KAFJ;AAGD"},"metadata":{},"sourceType":"module"}